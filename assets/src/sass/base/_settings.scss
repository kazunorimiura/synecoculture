@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:string";
@use "../config";

@mixin light-theme {
    @include config.color-palette;
    @include config.foundation-colors;
    @include config.core-colors;
    @include config.core-extension-colors;
    @include config.program-colors;
}

@mixin dark-theme {
    @include config.color-palette;
    @include config.foundation-colors--dark;
    @include config.core-colors--dark;
    @include config.core-extension-colors--dark;
    @include config.program-colors--dark;
}

/// 単位を取り除いて数値のみにする
///
/// @param {number} $number - 単位付きの数字
/// @output
///
@function strip-unit($number) {
    @if "number" == type-of($number) and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@function em($value, $base: 16px) {
    @return strip-unit(math.div($value, $base)) * 1em;
}

@function rem($value, $base: 16px) {
    @return strip-unit(math.div($value, $base)) * 1rem;
}

@function px($value) {
    @return strip-unit($value) * 16px;
}

/// JSのtoFixed()にあたる関数
///
/// @param {number} $float - Number to format
/// @param {number} $digits [2] - Number of digits to leave
/// @return {number}
/// @example
///
/// @output
///
@function to-fixed($float, $digits: 2) {
    $sass-precision: 5;

    @if $digits > $sass-precision {
        @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now." + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`." + "See https://github.com/sass/sass/issues/1122 for further informations.";
    }

    $pow: math.pow(10, $digits);

    @return math.div(round($float * $pow), $pow);
}

/// Replace `$search` with `$replace` in `$string`
/// Used on our SVG icon backgrounds for custom forms.
///
/// @param {string} $string - Initial string
/// @param {string} $search - Substring to replace
/// @param {string} $replace ('') - New value
/// @return {string} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: string.index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

/// Characters which are escaped by the escape-svg function
$escaped-characters: (("<", "%3c"), (">", "%3e"), ("#", "%23"), ("(", "%28"), (")", "%29"));

/// See https://codepen.io/kevinweber/pen/dXWoRw
///
/// Requires the use of quotes around data URIs.
@function escape-svg($string) {
    @if str-index($string, "data:image/svg+xml") {
        @each $char, $encoded in $escaped-characters {
            // Do not escape the url brackets
            @if str-index($string, "url(") == 1 {
                $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: str-replace($string, $char, $encoded);
            }
        }
    }

    @return $string;
}

/// `get-data-url` 関数用のSVGリスト
$svgs: (
    "angle-down": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 17.27L3.95996 9.68L5.67996 7.87L12 13.83L18.32 7.87L20.04 9.68L12 17.27Z" fill="FILL_COLOR"/></svg>',
    "angle-left": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.32 20.04 6.73 12l7.59-8.04 1.82 1.72L10.17 12l5.97 6.32z" fill="FILL_COLOR"/></svg>',
    "angle-right": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M9.68 20.04L7.87 18.32L13.83 12L7.87 5.68L9.68 3.96L17.27 12L9.68 20.04Z" fill="FILL_COLOR"/></svg>',
    "check": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.1 8.1 9.5 19.6 2.9 13 5 10.9l4.4 4.4 9.4-9.4 2.3 2.2z" fill="FILL_COLOR"/></svg>',
    "radio": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><circle cx="12" cy="12" r="7.5" fill="FILL_COLOR"/></svg>',
    "open-in-new": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.5 18.4H6.5C6 18.4 5.6 18 5.6 17.5V6.5C5.6 6 6 5.6 6.5 5.6H11.1C11.6 5.6 12 5.2 12 4.7C12 4.2 11.6 3.8 11.1 3.8H5.6C4.6 3.8 3.8 4.6 3.8 5.6V18.4C3.8 19.4 4.6 20.2 5.6 20.2H18.4C19.4 20.2 20.2 19.4 20.2 18.4V12.9C20.2 12.4 19.8 12 19.3 12C18.8 12 18.4 12.4 18.4 12.9V17.5C18.4 18 18 18.4 17.5 18.4ZM13.8 4.7C13.8 5.2 14.2 5.6 14.7 5.6H17.1L8.8 14C8.4 14.4 8.4 14.9 8.8 15.3C9.2 15.7 9.7 15.7 10.1 15.3L18.5 6.9V9.3C18.5 9.8 18.9 10.2 19.4 10.2C19.9 10.2 20.3 9.8 20.3 9.3V4.7C20.3 4.2 19.9 3.8 19.4 3.8H14.8C14.2 3.8 13.8 4.2 13.8 4.7Z" fill="FILL_COLOR"/></svg>',
    "quote": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M10.96 9.3c0 3.77-1.49 7.76-3.77 9.95H3.54c1.91-2.07 3.11-4.69 3.36-7.05H3.5V4.74h7.46V9.3zm9.54 0c0 3.77-1.49 7.76-3.77 9.95h-3.65c1.91-2.07 3.11-4.69 3.36-7.05h-3.4V4.74h7.47V9.3z" fill="FILL_COLOR"/></svg>',
    "light-mode": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 11h-3.6c-.2-1.1-.6-2-1.2-2.8l2.5-2.5c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0l-2.5 2.5c-.8-.6-1.8-1-2.8-1.2V2c0-.6-.4-1-1-1s-1 .4-1 1v3.6c-1.1.1-2 .5-2.8 1.1L5.6 4.2c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.5 2.5c-.6.9-1 1.8-1.1 2.9H2c-.6 0-1 .4-1 1s.4 1 1 1h3.6c.2 1.1.6 2 1.2 2.8l-2.5 2.5c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.5-2.5c.8.6 1.8 1 2.8 1.2V22c0 .6.4 1 1 1s1-.4 1-1v-3.6c1.1-.2 2-.6 2.8-1.2l2.5 2.5c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4l-2.5-2.5c.6-.8 1-1.8 1.2-2.8H22c.6 0 1-.4 1-1s-.4-1-1-1z" fill="FILL_COLOR"/></svg>',
    "dark-mode": '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M20.4 15.3c-1.4 3.2-4.6 5.2-8.1 5.1-4.8.1-8.7-3.7-8.8-8.5 0-4.4 3.4-8 7.7-8.5.3 0 .6.1.8.4.1.3.1.7-.2.9C10.6 5.8 10 7.3 10 8.9c.1 3.4 2.9 6.1 6.3 6 1 0 2.1-.3 3-.8.4-.2.8-.1 1 .3.2.4.2.7.1.9z" fill="FILL_COLOR"/></svg>',
    "radius-reverse-left": '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M0 0C0 8.83655 7.16345 16 16 16H0V0Z" fill="FILL_COLOR"/></svg>',
    "radius-reverse-right": '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M16 16H0C8.83655 16 16 8.83655 16 0V16Z" fill="FILL_COLOR"/></svg>',
);

/// SVGをdata URLとしてエンコードしたデータを取得する関数。
/// @param {string} $key キー名。キーは `$svgs` リストに存在する必要がある。
/// @param {string} $color fillカラー。data URLにCSS変数は使えないので注意。
/// @return {string} data URL。
/// @example
///     background-image: escape-svg(get-data-url("angle-down", #000));
///     // background-image: url("data:image/svg+xml...);
@function get-data-url($key, $color) {
    $svg-template: map.get($svgs, $key); // マップからSVGテンプレートを取得
    $svg-colored: str-replace($svg-template, "FILL_COLOR", $color); // 色を置き換える

    @return url("data:image/svg+xml,#{$svg-colored}"); // data URLとしてエンコードして返す
}

/// 識別子で重ね順を管理
/// インデックスが若いほど上にくる
/// @type List
$z-index-order: ("global-nav-button", "global-nav", "dropdown-menu", "site-header", "primary-nav", "default");

/// z-index識別子をCSSプロパティ値に変換
/// @param {string} $name z-index識別子
/// @return {number} z-index値
/// @example
///     z-index: z-index("default")
///     // z-index: 1
@function z-index($name) {
    @if index($z-index-order, $name) {
        @return (length($z-index-order) - index($z-index-order, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; Choose one of: #{$z-index-order}';
        @return null;
    }
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;
    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_"),
    );
    $formats: (
        otf: "opentype",
        ttf: "truetype",
    );

    @each $ext in $exts {
        $extmod: if(map.has-key($extmods, $ext), $ext + map.get($extmods, $ext), $ext);
        $format: if(map.has-key($formats, $ext), map.get($formats, $ext), $ext);
        $src: list.append($src, url($path + "." + $extmod) format(string.quote($format)), comma);
    }

    @font-face {
        font-family: $name;
        font-style: $style;
        font-weight: $weight;
        src: $src;
        font-display: swap;
    }
}

@include font-face("YakuHanJPs", "/assets/src/fonts/YakuHanJPs/YakuHanJPs-SemiBold", 600, normal, woff2);
@include font-face("YakuHanJPs", "/assets/src/fonts/YakuHanJPs/YakuHanJPs-Medium", 500, normal, woff2);
@include font-face("YakuHanJPs", "/assets/src/fonts/YakuHanJPs/YakuHanJPs-Regular", 400, normal, woff2);

/// 流体サイジングのビューポート区間
$min-viewport: map.get(config.$viewport, min);
$max-viewport: map.get(config.$viewport, max);

/// 流体サイジングを返す
/// @param {number} $min-size 最小サイズ
/// @param {number} $max-size 最大サイズ
/// @param {number} $min-viewport [$min-viewport] 最小ビューポートサイズ
/// @param {number} $max-viewport [$max-viewport] 最大ビューポートサイズ
/// @param {number} $remove-max [false] 最大ビューポートサイズを超えても流体サイジングを継続するか
/// @param {number} $force-unit [false] 値の単位の使用を強制するか（px単位のみ対象）。デフォルトはしない
/// @return {number}
/// @example
///     fd(16px, 24px)
///     fd(1em, 1.5em)
///     fd(16px, 24px, $remove-max: true)
/// @output
///     min(max(1rem, calc(1rem + (1.5 - 1) * ((100vw - 23.4375rem) / (90 - 23.4375)))), 1.5rem)
///     min(max(1em, calc(1em + (1.5 - 1) * ((100vw - 23.4375em) / (90 - 23.4375)))), 1.5em)
///     max(1rem, calc(1rem + (1.5 - 1) * ((100vw - 23.4375rem) / (90 - 23.4375))))
@function fd($min-value, $max-value, $min-viewport: $min-viewport, $max-viewport: $max-viewport, $remove-max: false, $force-unit: false) {
    @if $min-value == $max-value {
        @return $max-value;
    }

    $min-viewport: strip-unit($min-viewport);
    $max-viewport: strip-unit($max-viewport);
    $unit: math.unit($min-value);

    // 単位（pxのみ対象）強制の無効、かつ最小・最大サイズがpxの場合、rem値に変換
    @if false == $force-unit and "px" == $unit {
        $min-value: strip-unit($min-value);
        $max-value: strip-unit($max-value);
        $min-value: rem($min-value);
        $max-value: rem($max-value);
    }

    // 単位がない場合、rem値に変換
    @if "" == $unit {
        $min-value: rem($min-value);
        $max-value: rem($max-value);
    }

    $scaler: calc(#{$min-value} + (#{strip-unit($max-value)} - #{strip-unit($min-value)}) * ((100vw - #{if("em" == $unit, em($min-viewport), rem($min-viewport))}) / (#{math.div($max-viewport, 16)} - #{math.div($min-viewport, 16)})));

    @if $remove-max == false {
        @if $min-value < $max-value {
            @return min(max(#{$min-value}, #{$scaler}), #{$max-value});
        } @else {
            @return max(min(#{$min-value}, #{$scaler}), #{$max-value});
        }
    } @else {
        @if $min-value < $max-value {
            @return max(#{$min-value}, #{$scaler});
        } @else {
            @return min(#{$min-value}, #{$scaler});
        }
    }
}

/// 調和数列に基づくサイズバリエーションを取得
///
/// 参考: https://github.com/ShiftbrainStd/harmonic-modular-scale
///
/// @param {number} $base ベースサイズ値。後からremまたはem単位でfd関数に通せるように単位はつけない
/// @param {number} $scale-factor 調和数列のスケール因子（分子にあたる数値）
/// @return {map}
/// @example
///     $sizes: hms(16, 8)
/// @output
///     (s5: 42.6666666667, s4: 32, s3: 25.6, s2: 21.3333333333, s1: 18.2857142857, s0: 16, s-1: 14.2222222222, s-2: 12.8, s-3: 11.6363636364, s-4: 10.6666666667, s-5: 9.8461538462)
@function hms($base, $scale-factor) {
    $base: strip-unit($base);
    $sizes: (
        s7: $base * math.div($scale-factor, $scale-factor - 7),
        s6: $base * math.div($scale-factor, $scale-factor - 6),
        s5: $base * math.div($scale-factor, $scale-factor - 5),
        s4: $base * math.div($scale-factor, $scale-factor - 4),
        s3: $base * math.div($scale-factor, $scale-factor - 3),
        s2: $base * math.div($scale-factor, $scale-factor - 2),
        s1: $base * math.div($scale-factor, $scale-factor - 1),
        s0: $base,
        s-1: $base * math.div($scale-factor, $scale-factor + 1),
        s-2: $base * math.div($scale-factor, $scale-factor + 2),
        s-3: $base * math.div($scale-factor, $scale-factor + 3),
        s-4: $base * math.div($scale-factor, $scale-factor + 4),
        s-5: $base * math.div($scale-factor, $scale-factor + 5),
        s-6: $base * math.div($scale-factor, $scale-factor + 6),
        s-7: $base * math.div($scale-factor, $scale-factor + 7),
        s-8: $base * math.div($scale-factor, $scale-factor + 8),
        s-9: $base * math.div($scale-factor, $scale-factor + 9),
        s-10: $base * math.div($scale-factor, $scale-factor + 10),
        s-11: $base * math.div($scale-factor, $scale-factor + 11),
        s-12: $base * math.div($scale-factor, $scale-factor + 12),
    );

    @return $sizes;
}

/// フォントサイズのハーモニックモジュラースケール
$min-font-sizes: hms(map.get(map.get(config.$hms-font-size, min), size), map.get(map.get(config.$hms-font-size, min), numerator));
$max-font-sizes: hms(map.get(map.get(config.$hms-font-size, max), size), map.get(map.get(config.$hms-font-size, max), numerator));

/// 行高のハーモニックモジュラースケール
$min-line-height-sizes: hms(map.get(map.get(config.$hms-line-height, min), size), map.get(map.get(config.$hms-line-height, min), numerator));
$max-line-height-sizes: hms(map.get(map.get(config.$hms-line-height, max), size), map.get(map.get(config.$hms-line-height, max), numerator));

/// CSS変数の定義
@mixin css-variables {
    /// スペース（rem）
    --space-s7: #{fd(rem(map.get($min-font-sizes, s7)), rem(map.get($max-font-sizes, s7)))};
    --space-s6: #{fd(rem(map.get($min-font-sizes, s6)), rem(map.get($max-font-sizes, s6)))};
    --space-s5: #{fd(rem(map.get($min-font-sizes, s5)), rem(map.get($max-font-sizes, s5)))};
    --space-s4: #{fd(rem(map.get($min-font-sizes, s4)), rem(map.get($max-font-sizes, s4)))};
    --space-s3: #{fd(rem(map.get($min-font-sizes, s3)), rem(map.get($max-font-sizes, s3)))};
    --space-s2: #{fd(rem(map.get($min-font-sizes, s2)), rem(map.get($max-font-sizes, s2)))};
    --space-s1: #{fd(rem(map.get($min-font-sizes, s1)), rem(map.get($max-font-sizes, s1)))};
    --space-s0: #{fd(rem(map.get($min-font-sizes, s0)), rem(map.get($max-font-sizes, s0)))};
    --space-s-1: #{fd(rem(map.get($min-font-sizes, s-1)), rem(map.get($max-font-sizes, s-1)))};
    --space-s-2: #{fd(rem(map.get($min-font-sizes, s-2)), rem(map.get($max-font-sizes, s-2)))};
    --space-s-3: #{fd(rem(map.get($min-font-sizes, s-3)), rem(map.get($max-font-sizes, s-3)))};
    --space-s-4: #{fd(rem(map.get($min-font-sizes, s-4)), rem(map.get($max-font-sizes, s-4)))};
    --space-s-5: #{fd(rem(map.get($min-font-sizes, s-5)), rem(map.get($max-font-sizes, s-5)))};
    --space-s-6: #{fd(rem(map.get($min-font-sizes, s-6)), rem(map.get($max-font-sizes, s-6)))};
    --space-s-7: #{fd(rem(map.get($min-font-sizes, s-7)), rem(map.get($max-font-sizes, s-7)))};
    --space-s-8: #{fd(rem(map.get($min-font-sizes, s-8)), rem(map.get($max-font-sizes, s-8)))};
    --space-s-9: #{fd(rem(map.get($min-font-sizes, s-9)), rem(map.get($max-font-sizes, s-9)))};
    --space-s-10: #{fd(rem(map.get($min-font-sizes, s-10)), rem(map.get($max-font-sizes, s-10)))};
    --space-s-11: #{fd(rem(map.get($min-font-sizes, s-11)), rem(map.get($max-font-sizes, s-11)))};
    --space-s-12: #{fd(rem(map.get($min-font-sizes, s-12)), rem(map.get($max-font-sizes, s-12)))};
    --space-s-space: 0.4rem; // 擬似的な半角スペース

    /// スペース（em）
    --space-s7em: #{fd(em(map.get($min-font-sizes, s7)), em(map.get($max-font-sizes, s7)))};
    --space-s6em: #{fd(em(map.get($min-font-sizes, s6)), em(map.get($max-font-sizes, s6)))};
    --space-s5em: #{fd(em(map.get($min-font-sizes, s5)), em(map.get($max-font-sizes, s5)))};
    --space-s4em: #{fd(em(map.get($min-font-sizes, s4)), em(map.get($max-font-sizes, s4)))};
    --space-s3em: #{fd(em(map.get($min-font-sizes, s3)), em(map.get($max-font-sizes, s3)))};
    --space-s2em: #{fd(em(map.get($min-font-sizes, s2)), em(map.get($max-font-sizes, s2)))};
    --space-s1em: #{fd(em(map.get($min-font-sizes, s1)), em(map.get($max-font-sizes, s1)))};
    --space-s0em: #{fd(em(map.get($min-font-sizes, s0)), em(map.get($max-font-sizes, s0)))};
    --space-s-1em: #{fd(em(map.get($min-font-sizes, s-1)), em(map.get($max-font-sizes, s-1)))};
    --space-s-2em: #{fd(em(map.get($min-font-sizes, s-2)), em(map.get($max-font-sizes, s-2)))};
    --space-s-3em: #{fd(em(map.get($min-font-sizes, s-3)), em(map.get($max-font-sizes, s-3)))};
    --space-s-4em: #{fd(em(map.get($min-font-sizes, s-4)), em(map.get($max-font-sizes, s-4)))};
    --space-s-5em: #{fd(em(map.get($min-font-sizes, s-5)), em(map.get($max-font-sizes, s-5)))};
    --space-s-6em: #{fd(em(map.get($min-font-sizes, s-6)), em(map.get($max-font-sizes, s-6)))};
    --space-s-7em: #{fd(em(map.get($min-font-sizes, s-7)), em(map.get($max-font-sizes, s-7)))};
    --space-s-8em: #{fd(em(map.get($min-font-sizes, s-8)), em(map.get($max-font-sizes, s-8)))};
    --space-s-9em: #{fd(em(map.get($min-font-sizes, s-9)), em(map.get($max-font-sizes, s-9)))};
    --space-s-10em: #{fd(em(map.get($min-font-sizes, s-10)), em(map.get($max-font-sizes, s-10)))};
    --space-s-11em: #{fd(em(map.get($min-font-sizes, s-11)), em(map.get($max-font-sizes, s-11)))};
    --space-s-12em: #{fd(em(map.get($min-font-sizes, s-12)), em(map.get($max-font-sizes, s-12)))};

    /// font-family
    // config.$font-familyの最初のキーをデフォルトのフォントファミリーとする
    @each $type, $family in map.get(config.$font-family, nth(map-keys(config.$font-family), 1)) {
        --font-family-#{$type}: #{$family};
    }

    // lang属性ごとにフォントファミリーを定義
    @each $lang, $families in config.$font-family {
        &[lang|="#{$lang}"] {
            @each $type, $family in $families {
                --font-family-#{$type}: #{$family};
            }
        }
    }

    /// font-size
    --font-size-display-lg: #{fd(rem(map.get($min-font-sizes, s7)), rem(map.get($max-font-sizes, s7)))};
    --font-size-display: #{fd(rem(map.get($min-font-sizes, s6)), rem(map.get($max-font-sizes, s6)))};
    --font-size-headline-1: #{fd(rem(map.get($min-font-sizes, s5)), rem(map.get($max-font-sizes, s5)))};
    --font-size-headline-2: #{fd(rem(map.get($min-font-sizes, s3)), rem(map.get($max-font-sizes, s3)))};
    --font-size-headline-3: #{fd(rem(map.get($min-font-sizes, s2)), rem(map.get($max-font-sizes, s2)))};
    --font-size-headline-4: #{fd(rem(map.get($min-font-sizes, s1)), rem(map.get($max-font-sizes, s1)))};
    --font-size-headline-5: #{fd(rem(map.get($min-font-sizes, s0)), rem(map.get($max-font-sizes, s0)))};
    --font-size-headline-6: #{fd(rem(map.get($min-font-sizes, s0)), rem(map.get($max-font-sizes, s0)))};
    --font-size-article: #{fd(rem(map.get($min-font-sizes, s0)), rem(map.get($max-font-sizes, s1)))};
    --font-size-text: #{fd(rem(map.get($min-font-sizes, s0)), rem(map.get($max-font-sizes, s0)))};
    --font-size-text--sm: #{fd(rem(map.get($min-font-sizes, s-1)), rem(map.get($max-font-sizes, s-1)))};
    --font-size-text--xs: #{fd(rem(map.get($min-font-sizes, s-2)), rem(map.get($max-font-sizes, s-2)))};
    --font-size-tiny: #{fd(rem(map.get($min-font-sizes, s-3)), rem(map.get($max-font-sizes, s-3)))};

    /// line-height ※min/maxの中間値を設定（単位のない流体サイジングは実現が不可能）
    --line-height-display-lg: 1.2;
    --line-height-display: #{math.div(math.max(map.get($min-line-height-sizes, s6), map.get($max-line-height-sizes, s6)) - math.min(map.get($min-line-height-sizes, s6), map.get($max-line-height-sizes, s6)), 2) + math.min(map.get($min-line-height-sizes, s6), map.get($max-line-height-sizes, s6))};
    --line-height-headline-1: #{math.div(math.max(map.get($min-line-height-sizes, s5), map.get($max-line-height-sizes, s5)) - math.min(map.get($min-line-height-sizes, s5), map.get($max-line-height-sizes, s5)), 2) + math.min(map.get($min-line-height-sizes, s5), map.get($max-line-height-sizes, s5))};
    --line-height-headline-2: #{math.div(math.max(map.get($min-line-height-sizes, s4), map.get($max-line-height-sizes, s4)) - math.min(map.get($min-line-height-sizes, s4), map.get($max-line-height-sizes, s4)), 2) + math.min(map.get($min-line-height-sizes, s4), map.get($max-line-height-sizes, s4))};
    --line-height-headline-3: #{math.div(math.max(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3)) - math.min(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3)), 2) + math.min(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3))};
    --line-height-headline-4: #{math.div(math.max(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2)) - math.min(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2)), 2) + math.min(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2))};
    --line-height-headline-5: #{math.div(math.max(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1)) - math.min(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1)), 2) + math.min(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1))};
    --line-height-headline-6: #{math.div(math.max(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)) - math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)), 2) + math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0))};
    --line-height-article: #{math.div(math.max(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)) - math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)), 2) + math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0))};
    --line-height-text: #{math.div(math.max(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)) - math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0)), 2) + math.min(map.get($min-line-height-sizes, s0), map.get($max-line-height-sizes, s0))};
    --line-height-text--sm: #{math.div(math.max(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1)) - math.min(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1)), 2) + math.min(map.get($min-line-height-sizes, s1), map.get($max-line-height-sizes, s1))};
    --line-height-text--xs: #{math.div(math.max(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2)) - math.min(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2)), 2) + math.min(map.get($min-line-height-sizes, s2), map.get($max-line-height-sizes, s2))};
    --line-height-tiny: #{math.div(math.max(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3)) - math.min(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3)), 2) + math.min(map.get($min-line-height-sizes, s3), map.get($max-line-height-sizes, s3))};
    --line-height-sign: 1.2;

    // font
    --font-display-lg: var(--font-weight-bold) var(--font-size-display-lg) / var(--line-height-display-lg) var(--font-family-display);
    --font-display: var(--font-weight-bold) var(--font-size-display) / var(--line-height-display) var(--font-family-headline);
    --font-headline-1: var(--font-weight-bold) var(--font-size-headline-1) / var(--line-height-headline-1) var(--font-family-headline);
    --font-headline-2: var(--font-weight-bold) var(--font-size-headline-2) / var(--line-height-headline-2) var(--font-family-headline);
    --font-headline-3: var(--font-weight-bold) var(--font-size-headline-3) / var(--line-height-headline-3) var(--font-family-headline);
    --font-headline-4: var(--font-weight-bold) var(--font-size-headline-4) / var(--line-height-headline-4) var(--font-family-headline);
    --font-headline-5: var(--font-weight-bold) var(--font-size-headline-5) / var(--line-height-headline-5) var(--font-family-headline);
    --font-headline-6: var(--font-weight-bold) var(--font-size-headline-6) / var(--line-height-headline-6) var(--font-family-headline);
    --font-article: var(--font-weight-text) var(--font-size-article) / var(--line-height-article) var(--font-family-text);
    --font-text: var(--font-weight-text) var(--font-size-text) / var(--line-height-text) var(--font-family-text);
    --font-text--sm: var(--font-weight-text) var(--font-size-text--sm) / var(--line-height-text--sm) var(--font-family-text);
    --font-text--xs: var(--font-weight-text) var(--font-size-text--xs) / var(--line-height-text--xs) var(--font-family-text);
    --font-tiny: var(--font-weight-text) var(--font-size-tiny) / var(--line-height-tiny) var(--font-family-text);

    /// font-weight
    @each $key, $value in config.$font-weight {
        --font-weight-#{$key}: #{$value};
    }

    /// width
    @each $key, $value in config.$width {
        --width-#{$key}: #{$value};
    }

    /// サイトヘッダーの高さ
    --site-header-height: #{fd(map.get(config.$site-header-height, min), map.get(config.$site-header-height, max))};

    /// サイトガター（サイトコンテンツの両サイドに設ける余白）
    --site-gutter: #{fd(map.get(config.$site-gutter, min), map.get(config.$site-gutter, max))};

    /// サイトガターslat版（サイトコンテンツの両サイドに設ける余白）
    --site-gutter-slat: #{fd(map.get(config.$site-gutter-slat, min), map.get(config.$site-gutter-slat, max))};

    /// サイトガターwide版（サイトコンテンツの両サイドに設ける余白）
    --site-gutter-wide: calc(#{fd(map.get(config.$site-gutter, min), map.get(config.$site-gutter, max))} + 5vw);

    /// 角丸
    --radius-xs: #{rem(config.$radius-xs)};
    --radius-sm: #{rem(config.$radius-sm)};
    --radius: #{rem(config.$radius)};
    --radius-md: #{rem(config.$radius-md)};
    --radius-lg: #{rem(config.$radius-lg)};

    /// デフォルトのアニメーション速度
    --duration: #{config.$duration};

    /// インデントスペース
    --indent: #{config.$indent};

    /// スイッチャーユーティリティ用: ブレークポイント（rem値）
    @each $key, $value in config.$breakpoints {
        --bp-#{$key}: #{rem($value)};
    }

    /// JavaScriptと共有: ブレークポイント（px値）
    @each $key, $value in config.$breakpoints {
        --breakpoint-#{$key}: #{$value};
    }

    /// JavaScriptと共有: ドロップダウンメニュー
    --dropdown-menu-width: 15.625rem;
    --dropdown-menu-gap: #{map.get(config.$dropdown-menu, gap)};
    --dropdown-menu-sub-menu-padding: #{map.get(config.$dropdown-menu, sub-menu-padding)};
    --dropdown-menu-sub-menu-border-width: #{map.get(config.$dropdown-menu, sub-menu-border-width)};

    // input要素のパディング
    --input-padding-block: #{fd(em(17), em(20))};
    --input-padding-inline: #{fd(em(17), em(20))};
}

/// config設定をコピーして他の場所でも参照できるようにする。
$breakpoints: config.$breakpoints;
